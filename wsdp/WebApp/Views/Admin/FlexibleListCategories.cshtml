@model  List<Model.DTO.CategoryDTO>

@{
    TagBuilder ol = new TagBuilder("ddd");

    ol.InnerHtml = "";

    <style>

    </style>
    foreach (var category in Model)
    {

        var propertiesList = new TagBuilder("ul");
        propertiesList.AddCssClass("list-group properties_list");
        if (category.PropertyList != null && category.PropertyList.Count > 0)
        {
            foreach (var prop in category.PropertyList)
            {
                var propertyItem = new TagBuilder("li");
                propertyItem.AddCssClass("btn btn-active property_item list-group-item");
                propertyItem.Attributes.Add("property-id", prop.Id.ToString());
                propertyItem.SetInnerText(prop.Name);
                propertyItem.InnerHtml = prop.Name + @"<div class='propert-actions'>
                                                        <div class='glyphicon glyphicon-trash delete_prop' onclick='DeleteProperty()'>
	                                                    </div>
	                                                    <div class='glyphicon glyphicon-edit update_prop' >
	                                                    </div>
                                                    </div>
                                                    ";
                propertiesList.InnerHtml += propertyItem;
            }
            TagBuilder li = new TagBuilder("li");
            li.Attributes.Add("data-id", category.Id.ToString());
            li.Attributes.Add("data-name", category.Name);
            li.InnerHtml = "<b class=\"namecategory\">" + category.Name + "</b>"
                + "<button class=\"btn handler transperent btn-sm glyphicon hidden glyphicon-move text-muted\"></button>"
                + "<button class='btn adder transperent btn-sm glyphicon hidden glyphicon-plus-sign text-muted'></button>"
                + "<button class='btn togglebutt transperent btn-sm glyphicon hidden glyphicon-arrow-down'></button>"
                + "<button class=\"btn transperent hidden btn-config \"   data-toggle=\"modal\" data-target=\"#ModalUpdate\" ><small class=\"glyphicon glyphicon-cog\"></small></button>"
                + "<button class=\"btn transperent hidden btn-add \"      data-toggle=\"modal\" data-target=\"#ModalAdd\"    ><small class=\"glyphicon glyphicon-plus\"></small></button>"
                + "<button class=\"btn transperent hidden btn-remove \" data-toggle=\"modal\" data-target=\"#ModalDelete\" ><small class=\"glyphicon glyphicon-minus\" ></small></button>"
                +"<div class='properties'> "
                + propertiesList
                + "</div>";
            TagBuilder ul = new TagBuilder("ul");
            if (category.ChildrenCategory != null)
            {
                ul.InnerHtml = Html.Partial("FlexibleListCategories", category.ChildrenCategory).ToString();
            }
            li.InnerHtml += ul;
            ol.InnerHtml += li;

        }
        else
        {
            TagBuilder li = new TagBuilder("li");
            li.Attributes.Add("data-id", category.Id.ToString());
            li.Attributes.Add("data-name", category.Name);
            li.InnerHtml = "<b class=\"namecategory\">" + category.Name + "</b>"
                + "<button class=\"btn handler transperent btn-sm glyphicon glyphicon-move hidden text-muted\"></button>"
                + "<button class='btn adder transperent btn-sm glyphicon hidden glyphicon-plus-sign text-muted'></button>"
                + "<button class=\"btn transperent hidden btn-config \"   data-toggle=\"modal\" data-target=\"#ModalUpdate\" ><small class=\"glyphicon glyphicon-cog\"></small></button>"
                + "<button class=\"btn transperent hidden btn-add \"      data-toggle=\"modal\" data-target=\"#ModalAdd\"    ><small class=\"glyphicon glyphicon-plus\"></small></button>"
                + "<button class=\"btn transperent hidden btn-remove \" data-toggle=\"modal\" data-target=\"#ModalDelete\" ><small class=\"glyphicon glyphicon-minus\" ></small></button>";
            TagBuilder ul = new TagBuilder("ul");
            if (category.ChildrenCategory != null)
            {
                ul.InnerHtml = Html.Partial("FlexibleListCategories", category.ChildrenCategory).ToString();
            }


            li.InnerHtml += ul;
            ol.InnerHtml += li;
        }

    }
    MvcHtmlString ms = new MvcHtmlString(ol.InnerHtml);


    @ms
}



